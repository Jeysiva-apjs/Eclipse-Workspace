package com.healthycoderapp;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

class BMICalculatorTest {

	@ParameterizedTest
	@ValueSource(doubles = { 60.0, 95.0, 110.0 })
	void should_ReturnTrue_When_DietRecommended(double coderWeight) {
		// given
		double weight = coderWeight;
		double height = 1.72;
		
		// when
		boolean recommended = BMICalculator.isDietRecommended(weight, height);
		
		// then
		assertTrue(recommended);
	}
	
	@Test
	void should_ReturnFalse_When_DietNotRecommended() {
		// given
		double weight = 60.0;
		double height = 1.70;
		
		// when
		boolean recommended = BMICalculator.isDietRecommended(weight, height);
		
		// then
		assertFalse(recommended);
	}
	
	@Test
	void should_ThrowArithmeticException_When_HeightZero() {
		//given
		double weight = 50.0;
		double height = 0.0;
		
		// when
		Executable executable = () -> BMICalculator.isDietRecommended(weight, height);
		
		// then
		assertThrows(ArithmeticException.class, executable);
		
	}
	
	void should_ReturnCoderWithWorstBMI_When_CoderListNotEmpty() {
		// given
		List<Coder> coders = Arrays.asList(new Coder(1.80, 60.0), new Coder(1.82, 98.0), new Coder(1.82, 64.7));

		// when
		Coder coderWorstBMI = BMICalculator.findCoderWithWorstBMI(coders);

		// then
		assertAll(
				() -> assertEquals(1.82, coderWorstBMI.getHeight()),
                () -> assertEquals(98.0, coderWorstBMI.getWeight())
				);

	}
	
	void should_ReturnNullWorstBMI_When_CoderListEmpty() {
		// given
		List<Coder> coders = Arrays.asList();

		// when
		Coder coderWorstBMI = BMICalculator.findCoderWithWorstBMI(coders);

		// then
		assertNull(coderWorstBMI);

	}
	
	void should_ReturnCorrectBMIScoreArray_When_CoderListNotEmpty() {
		// given
		List<Coder> coders = Arrays.asList(new Coder(1.80, 60.0), new Coder(1.82, 98.0), new Coder(1.82, 64.7));
		double[] expected = { 18.52, 29.59, 19.53 };

		// when
		double[] bmiScores = BMICalculator.getBMIScores(coders);

		// then
		assertArrayEquals(expected, bmiScores);

	}

}
